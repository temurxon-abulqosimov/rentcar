version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: rentcar_postgres
    environment:
      POSTGRES_DB: rentcar
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: admin
      POSTGRES_HOST_AUTH_METHOD: trust
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - rentcar_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d rentcar"]
      interval: 10s
      timeout: 5s
      retries: 5

  # NestJS Application
  app:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    container_name: rentcar_app
    ports:
      - "3000:3000"
    environment:
      NODE_ENV: production
      PORT: 3000
      DB_HOST: postgres
      DB_PORT: 5432
      DB_USERNAME: postgres
      DB_PASSWORD: admin
      DB_NAME: rentcar
      JWT_SECRET: your-super-secret-jwt-key-change-in-production
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - rentcar_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "node", "-e", "require('http').get('http://localhost:3000/health', (res) => { process.exit(res.statusCode === 200 ? 0 : 1) })"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Redis (optional, for caching and sessions)
  redis:
    image: redis:7-alpine
    container_name: rentcar_redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - rentcar_network
    restart: unless-stopped

volumes:
  postgres_data:
  redis_data:

networks:
  rentcar_network:
    driver: bridge 